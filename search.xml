<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>element-ui输入框限制字数会遮挡输入内容</title>
      <link href="/2024/07/28/element-ui%E8%BE%93%E5%85%A5%E6%A1%86%E9%99%90%E5%88%B6%E5%AD%97%E6%95%B0%E4%BC%9A%E9%81%AE%E6%8C%A1%E8%BE%93%E5%85%A5%E5%86%85%E5%AE%B9/"/>
      <url>/2024/07/28/element-ui%E8%BE%93%E5%85%A5%E6%A1%86%E9%99%90%E5%88%B6%E5%AD%97%E6%95%B0%E4%BC%9A%E9%81%AE%E6%8C%A1%E8%BE%93%E5%85%A5%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="element-ui输入框限制字数会遮挡输入内容"><a href="#element-ui输入框限制字数会遮挡输入内容" class="headerlink" title="element-ui输入框限制字数会遮挡输入内容"></a>element-ui输入框限制字数会遮挡输入内容</h1><p><code>element-ui</code> 的 <code>el-input</code> 组件设置 <code>maxlength</code> 和 <code>show-word-limit</code> 的时候右下角会统计字符个数以及最大限制字数。但是这里会遮挡正常输入的内容，如下图：</p><p><img src="/./images/input%E4%BC%98%E5%8C%96%E5%89%8D.png" alt="input组件优化前" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p><p>这样造成不好的 UI 体验，现在我们需要优化这个样式，可以使用下面的 CSS ，让字符总数和最大限制字数不遮挡正常输入的内容。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* textarea限制字数样式 */</span></span><br><span class="line"><span class="selector-class">.el-textarea</span> <span class="selector-class">.el-input__count</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">  <span class="attribute">position</span>: static;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">21px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终优化效果如下：</p><p><img src="/./images/input%E4%BC%98%E5%8C%96%E5%90%8E.png" alt="input组件优化后" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p><p>这样就不会遮挡正常输入的内容了，收工！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2024/03/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/03/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p><a href="https://github.com/lemonlyue/design-pattern-go/blob/main/README.md">github仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HK游记</title>
      <link href="/2023/10/03/HK%E6%B8%B8%E8%AE%B0/"/>
      <url>/2023/10/03/HK%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="HK-游记"><a href="#HK-游记" class="headerlink" title="HK 游记"></a>HK 游记</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=402306373&auto=1&height=66"></iframe><p><img src="/./images/202309hk-1.jpg" alt="HongKong" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/./images/202309hk-2.jpg" alt="HongKong" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/./images/202309hk-3.jpg" alt="HongKong" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/./images/202309hk-4.jpg" alt="HongKong" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/./images/202309hk-5.jpg" alt="HongKong" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/./images/202309hk-6.jpg" alt="HongKong" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/./images/202309hk-7.jpg" alt="HongKong" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/./images/202309hk-8.jpg" alt="HongKong" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/./images/202309hk-9.jpg" alt="HongKong" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/./images/202309hk-10.jpg" alt="HongKong" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HongKong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的基本架构</title>
      <link href="/2023/10/03/MySQL%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84/"/>
      <url>/2023/10/03/MySQL%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL的基本架构"><a href="#MySQL的基本架构" class="headerlink" title="MySQL的基本架构"></a>MySQL的基本架构</h1><p><img src="/./images/mysql%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84.webp" alt="MySQL的基础架构" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于MySQL的count用法</title>
      <link href="/2023/10/03/%E5%85%B3%E4%BA%8EMySQL%E7%9A%84count/"/>
      <url>/2023/10/03/%E5%85%B3%E4%BA%8EMySQL%E7%9A%84count/</url>
      
        <content type="html"><![CDATA[<h1 id="关于-MySQL-的-count-用法"><a href="#关于-MySQL-的-count-用法" class="headerlink" title="关于 MySQL 的 count() 用法"></a>关于 MySQL 的 count() 用法</h1><h2 id="count-函数概述"><a href="#count-函数概述" class="headerlink" title="count()函数概述"></a>count()函数概述</h2><p>count() 是一个聚合函数，返回指定匹配条件的行数。开发中常用来统计表中的数据。</p><h2 id="count-的实现方式"><a href="#count-的实现方式" class="headerlink" title="count(*) 的实现方式"></a>count(*) 的实现方式</h2><ul><li><p>MyISAM 引擎把一个表的总行数存在磁盘上，因此执行 count(*) 会直接返回这个数，效率很高。但是在加上 where 限定语句后 MySQL 需要对全表进行检索从而得出 count 的总数。</p></li><li><p>InnoDB 引擎执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累积计数。</p></li></ul><h3 id="为什么-InnoDB-不可以和-MyISAM-一样，把数字也存起来？"><a href="#为什么-InnoDB-不可以和-MyISAM-一样，把数字也存起来？" class="headerlink" title="为什么 InnoDB 不可以和 MyISAM 一样，把数字也存起来？"></a>为什么 InnoDB 不可以和 MyISAM 一样，把数字也存起来？</h3><ul><li>因为 InnoDB 即使在同一个时刻的多个查询，由于多版本兵法控制（MVCC）的原因，InnoDB 表返回行数也是不确定的。</li></ul><blockquote><p>InnoDB 在执行 count(<em>) 操作的时候做了优化<br>InnoDB 是索引组织表，主键索引树的叶子节点是数据，而普通索引树的叶子节点是主键值，所以普通索引树比主键索引树小很多。对于 count(</em>) 这样的操作，遍历哪个索引树得到的结果逻辑上都是一样的，因此 MySQL 优化器会找到最小的那棵树来遍历。在保证逻辑正确的前提下，尽量减少扫描的数据量，是数据库系统设计的通用法则之一。</p></blockquote><p><code>show table status</code>命令输出结果有<code>TABLE_ROWS</code>用于显示这个表当前有多少行，但不可代替 count(*)，因为索引统计的值是通过采样来估算的（MySQL会索引选择错误导致）。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><p>MyISAM 表虽然 count(*) 很快，但是不支持事务；</p></li><li><p><code>show table status</code>命令虽然返回很快，但是不准确；</p></li><li><p>InnoDB 表直接 count(*) 会遍历全表，虽然结果准确，但会导致性能的问题。</p></li></ul><h2 id="不同的-count-用法"><a href="#不同的-count-用法" class="headerlink" title="不同的 count 用法"></a>不同的 count 用法</h2><h3 id="count-主键id"><a href="#count-主键id" class="headerlink" title="count(主键id)"></a>count(主键id)</h3><p>InnoDB 引擎会遍历整张表，把每一行的 id 值都取出来返回给 server 层。server 层拿到 id 后，判断不可能为空的就按行累加。</p><h3 id="count-1"><a href="#count-1" class="headerlink" title="count(1)"></a>count(1)</h3><p>InnoDB 引擎遍历整张表，但不取值。server 层对于返回的每一行，放一个数字“1”进去，判断是不可能为空的，按行累加。</p><p>count(1) 执行速度比 count(主键id) 快，因为从引擎返回 id 会涉及到解析数据行，以及拷贝字段值的操作。</p><h3 id="count-字段"><a href="#count-字段" class="headerlink" title="count(字段)"></a>count(字段)</h3><ol><li><p>如果字段是 not null 的话，一行行地从记录里面读出这个字段，判断不能为 null，按行累加；</p></li><li><p>如果这个字段允许为 null，那么执行的时候，还要取值判断是否为 null，不为 null 才累加。</p></li></ol><h3 id="count"><a href="#count" class="headerlink" title="count(*)"></a>count(*)</h3><p>count(<em>) 是例外，不会把全部字段取出来，专门做了优化，不取值。count(</em>) 肯定不是 null，按行累加。</p><h2 id="各个-count-用法的执行速度"><a href="#各个-count-用法的执行速度" class="headerlink" title="各个 count 用法的执行速度"></a>各个 count 用法的执行速度</h2><p>count(字段)&lt; count(主键 id) &lt; count(1) ≈ count(*)</p><p>建议使用 count(*)</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-112.路径总和</title>
      <link href="/2023/10/02/LeetCode112/"/>
      <url>/2023/10/02/LeetCode112/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><ul><li><strong>难度</strong>：<span style="color:green;">简单</span></li><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/path-sum/">https://leetcode-cn.com/problems/path-sum/</a></li><li><strong>语言：</strong> PHP</li><li><strong>题目内容</strong>：<blockquote><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。<br><em><strong>说明</strong></em>: 叶子节点是指没有子节点的节点。</p></blockquote></li></ul><p><strong>示例</strong>：<br>给定如下二叉树，以及目标和 <code>sum = 22</code>，</p><blockquote><pre><code>          5         / \        4   8       /   / \      11  13  4     /  \      \    7    2      1</code></pre></blockquote><p>返回<code>true</code>, 因为存在目标和为 22 的根节点到叶子节点的路径<code>5-&gt;4-&gt;11-&gt;2</code>。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>深度优先遍历（递归）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * class TreeNode &#123;</span><br><span class="line"> *     public $val = null;</span><br><span class="line"> *     public $left = null;</span><br><span class="line"> *     public $right = null;</span><br><span class="line"> *     function __construct($value) &#123; $this-&gt;val = $value; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param TreeNode $root</span><br><span class="line">     * @param Integer $sum</span><br><span class="line">     * @return Boolean</span><br><span class="line">     */</span><br><span class="line">    function hasPathSum($root, $sum) &#123;</span><br><span class="line">        return $this-&gt;dfs($root, $sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 深度优先遍历</span><br><span class="line">     */</span><br><span class="line">    function dfs($root, $sum) &#123;</span><br><span class="line">        if ($root-&gt;val === null) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if ($root-&gt;left === null &amp;&amp; $root-&gt;right === null) &#123;</span><br><span class="line">            return $sum === $root-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        $sum -= $root-&gt;val;</span><br><span class="line">        return $this-&gt;dfs($root-&gt;left, $sum) || $this-&gt;dfs($root-&gt;right, $sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-113.路径总和II</title>
      <link href="/2023/10/02/LeetCode113/"/>
      <url>/2023/10/02/LeetCode113/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><ul><li><strong>难度</strong>：<span style="color:#ffa119;">中等</span></li><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/path-sum-ii/submissions/">https://leetcode-cn.com/problems/path-sum-ii/submissions/</a></li><li><strong>语言：</strong> PHP</li><li><strong>题目内容</strong>：<blockquote><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。<br><em><strong>说明</strong></em>: 叶子节点是指没有子节点的节点。</p></blockquote></li></ul><p><strong>示例</strong>：<br>给定如下二叉树，以及目标和 <code>sum = 22</code>，</p><blockquote><pre><code>          5         / \        4   8       /   / \      11  13  4     /  \      \    7    2      1</code></pre></blockquote><p>返回:</p><blockquote><p>[<br>     [5,4,11,2],<br>     [5,8,4,5]<br>]</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>深度优先遍历（递归）,记录遍历路径,如符合条件则输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * class TreeNode &#123;</span><br><span class="line"> *     public $val = null;</span><br><span class="line"> *     public $left = null;</span><br><span class="line"> *     public $right = null;</span><br><span class="line"> *     function __construct($value) &#123; $this-&gt;val = $value; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line"></span><br><span class="line">    protected $res = [];</span><br><span class="line">    /**</span><br><span class="line">     * @param TreeNode $root</span><br><span class="line">     * @param Integer $sum</span><br><span class="line">     * @return Integer[][]</span><br><span class="line">     */</span><br><span class="line">    function pathSum($root, $sum) &#123;</span><br><span class="line">        $this-&gt;dfs($root, $sum, []);</span><br><span class="line">        return $this-&gt;res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 深度优先遍历</span><br><span class="line">     */</span><br><span class="line">    function dfs($root, $sum, $arr) &#123;</span><br><span class="line">        if ($root-&gt;val === null) &#123;</span><br><span class="line">            return [];</span><br><span class="line">        &#125;</span><br><span class="line">        // 记录遍历路径</span><br><span class="line">        $arr[] = $root-&gt;val;</span><br><span class="line">        if ($root-&gt;left === null &amp;&amp; $root-&gt;right === null) &#123;</span><br><span class="line">            // 如条件符合,返回路径</span><br><span class="line">            if ($sum === $root-&gt;val) &#123;</span><br><span class="line">                $this-&gt;res[] = $arr;</span><br><span class="line">                // return $this-&gt;res;</span><br><span class="line">            &#125;</span><br><span class="line">            return [];</span><br><span class="line">        &#125;</span><br><span class="line">        $sum -= $root-&gt;val;</span><br><span class="line">        $this-&gt;dfs($root-&gt;left, $sum, $arr);</span><br><span class="line">        $this-&gt;dfs($root-&gt;right, $sum, $arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-1365.有多少小于当前数字的数字</title>
      <link href="/2023/10/02/LeetCode1365/"/>
      <url>/2023/10/02/LeetCode1365/</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><ul><li><strong>难度</strong>：<span style="color:green;">简单</span></li><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/how-many-numbers-are-smaller-than-the-current-number/">https://leetcode-cn.com/problems/how-many-numbers-are-smaller-than-the-current-number/</a></li><li><strong>语言：</strong> PHP</li><li><strong>题目内容</strong>：<blockquote><p>给你一个数组 nums，对于其中每个元素 nums[i]，请你统计数组中比它小的所有数字的数目。<br>换而言之，对于每个 nums[i] 你必须计算出有效的 j 的数量，其中 j 满足 j !&#x3D; i 且 nums[j] &lt; nums[i] 。<br>以数组形式返回答案。<br><strong>示例 1</strong>：<br><strong>输入：</strong>nums &#x3D; [8,1,2,2,3]<br><strong>输出：</strong>[4,0,1,1,3]<br><strong>解释：</strong> <br>对于 nums[0]&#x3D;8 存在四个比它小的数字：（1，2，2 和 3）。 <br>对于 nums[1]&#x3D;1 不存在比它小的数字。<br>对于 nums[2]&#x3D;2 存在一个比它小的数字：（1）。 <br>对于 nums[3]&#x3D;2 存在一个比它小的数字：（1）。 <br>对于 nums[4]&#x3D;3 存在三个比它小的数字：（1，2 和 2）。<br><strong>示例 2</strong>：<br><strong>输入：</strong>nums &#x3D; [6,5,4,8]<br><strong>输出：</strong>[2,1,0,3]<br><strong>示例 3</strong>：<br><strong>输入：</strong>nums &#x3D; [7,7,7,7]<br><strong>输出：</strong>[0,0,0,0]<br><strong>提示：</strong><br><code>2 &lt;= nums.length &lt;= 500</code><br><code>0 &lt;= nums[i] &lt;= 100</code></p></blockquote></li></ul><h3 id="二、解题"><a href="#二、解题" class="headerlink" title="二、解题"></a>二、解题</h3><ul><li>LeetCode给定函数体<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    /**</span><br><span class="line">     * @param Integer[] $nums</span><br><span class="line">     * @return Integer[]</span><br><span class="line">     */</span><br><span class="line">    function smallerNumbersThanCurrent($nums) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li>暴力破解</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 暴力解法</span><br><span class="line">     * @param Integer[] $nums</span><br><span class="line">     * @return Integer[]</span><br><span class="line">     */</span><br><span class="line">    function smallerNumbersThanCurrent($nums) &#123;</span><br><span class="line">        $arr = [];</span><br><span class="line">        for ($i=0;$i&lt;count($nums);$i++) &#123;</span><br><span class="line">            $num = 0;</span><br><span class="line">            for ($j=0;$j&lt;count($nums);$j++) &#123;</span><br><span class="line">                if ($i === $j) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                if ($nums[$i] &gt; $nums[$j]) &#123;</span><br><span class="line">                    $num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            $arr[] = $num; </span><br><span class="line">        &#125;</span><br><span class="line">        return $arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暴力破解结果：</p><p><img src="/./images/leetcode%E6%9C%89%E5%A4%9A%E5%B0%91%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E6%95%B0%E5%AD%97%E7%9A%84%E6%95%B0%E5%AD%971.png" alt="leetcode有多少小于当前数字的数字1" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p><ol start="2"><li>利用内置函数解题<blockquote><p>思路：先进行正序排序，排序后数组下标就是比当前数字小的数目，但是需要避免重复数字时是否会影响结果。<br>发现使用<code>array_search()</code>函数只查找第一次出现的数字，所以避免了重复数字的问题。</p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    /**</span><br><span class="line">     * @param Integer[] $nums</span><br><span class="line">     * @return Integer[]</span><br><span class="line">     */</span><br><span class="line">    function smallerNumbersThanCurrent($nums) &#123;</span><br><span class="line">        $new_nums = $nums;</span><br><span class="line">        sort($new_nums);</span><br><span class="line">        $arr = [];</span><br><span class="line">        for ($i=0;$i&lt;count($nums);$i++) &#123;</span><br><span class="line">            $arr[] = array_search($nums[$i], $new_nums);</span><br><span class="line">        &#125;</span><br><span class="line">        return $arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提交结果：<br><img src="/./images/leetcode%E6%9C%89%E5%A4%9A%E5%B0%91%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E6%95%B0%E5%AD%97%E7%9A%84%E6%95%B0%E5%AD%97.png" alt="leetcode有多少小于当前数字的数字" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-1436.旅行终点站</title>
      <link href="/2023/10/02/LeetCode1436/"/>
      <url>/2023/10/02/LeetCode1436/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><ul><li><strong>难度</strong>：<span style="color:green;">简单</span></li><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/destination-city/">https://leetcode-cn.com/problems/destination-city/</a></li><li><strong>语言：</strong> PHP</li><li><strong>题目内容</strong>：<blockquote><p>给你一份旅游线路图，该线路图中的旅行线路用数组 paths 表示，其中 paths[i] &#x3D; [cityAi, cityBi] 表示该线路将会从 cityAi 直接前往 cityBi 。请你找出这次旅行的终点站，即没有任何可以通往其他城市的线路的城市。<br>题目数据保证线路图会形成一条不存在循环的线路，因此只会有一个旅行终点站。</p></blockquote></li></ul><p><strong>示例 1</strong>：<br><strong>输入：</strong>paths &#x3D; [[“London”,”New York”],[“New York”,”Lima”],[“Lima”,”Sao Paulo”]]<br><strong>输出：</strong>“Sao Paulo”<br><strong>解释：</strong><br>从 “London” 出发，最后抵达终点站 “Sao Paulo” 。本次旅行的路线是 “London” -&gt; “New York” -&gt; “Lima” -&gt; “Sao Paulo” 。</p><p><strong>示例 2</strong>：<br><strong>输入：</strong>paths &#x3D; [[“B”,”C”],[“D”,”B”],[“C”,”A”]]<br><strong>输出：</strong>“A”<br><strong>解释：</strong><br>所有可能的线路是：<br>“D” -&gt; “B” -&gt; “C” -&gt; “A”. <br>“B” -&gt; “C” -&gt; “A”. <br>“C” -&gt; “A”. <br>“A”. <br>显然，旅行终点站是 “A” 。</p><p><strong>示例 3</strong>：<br><strong>输入：</strong>paths &#x3D; [[“A”,”Z”]]<br><strong>输出：</strong>“Z”</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p><strong>LeetCode给定函数体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param String[][] $paths</span><br><span class="line">     * @return String</span><br><span class="line">     */</span><br><span class="line">    function destCity($paths) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>终点就是不会作为起点，所以拆成两个数组（起点数组和终点数组），遍历终点数组，如果终点数组中某个元素不在起点数组内，则该地点就是最终的终点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param String[][] $paths</span><br><span class="line">     * @return String</span><br><span class="line">     */</span><br><span class="line">    function destCity($paths) &#123;</span><br><span class="line">        $start = [];</span><br><span class="line">        $end = [];</span><br><span class="line">        // 拆分为两个数组,获取起点和终点</span><br><span class="line">        foreach ($paths as $item) &#123;</span><br><span class="line">            $start[] = $item[0];</span><br><span class="line">            $end[] = $item[1];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * @desc PHP内置获取数组某一列</span><br><span class="line">         */</span><br><span class="line">        // $start = array_column($paths, 0);</span><br><span class="line">        // $end = array_column($paths, 1);</span><br><span class="line"></span><br><span class="line">        foreach ($end as $item) &#123;</span><br><span class="line">            // 判断终点是否存在于起点,存在则不是最终的终点</span><br><span class="line">            if (!in_array($item, $start)) &#123;</span><br><span class="line">                return $item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="/./images/1436.png" alt="1436" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-409.最长回文串（Longest Palindrome）</title>
      <link href="/2023/10/02/LeetCode409/"/>
      <url>/2023/10/02/LeetCode409/</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><ul><li><strong>难度</strong>：<span style="color:green;">简单</span></li><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/longest-palindrome/">https://leetcode-cn.com/problems/longest-palindrome/</a></li><li><strong>语言：</strong> PHP</li><li><strong>题目内容</strong>：<blockquote><p>给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。<br>在构造过程中，请注意区分大小写。比如 “Aa” 不能当做一个回文字符串。<br>**注意:**<br>假设字符串的长度不会超过 1010。<br><strong>示例 1</strong>：<br>输入:<br>“abccccdd”<br>输出:<br>7<br>解释:<br>我们可以构造的最长的回文串是”dccaccd”, 它的长度是 7。</p></blockquote></li></ul><h3 id="二、解题"><a href="#二、解题" class="headerlink" title="二、解题"></a>二、解题</h3><ul><li>LeetCode给定函数体<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param String $s</span><br><span class="line">     * @return Integer</span><br><span class="line">     */</span><br><span class="line">    function longestPalindrome($s) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li>解题<blockquote><p>思路：计算每个字母出现次数，将奇数减一，使之变为0或偶数，再将次数相加，若回文数长度为偶数且上个循环中有减1，则可加到回文数中间。</p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param String $s</span><br><span class="line">     * @return Integer</span><br><span class="line">     */</span><br><span class="line">    function longestPalindrome($s) &#123;</span><br><span class="line">        $arr = str_split($s);</span><br><span class="line">        $value = array_count_values($arr);</span><br><span class="line">        $length = 0;</span><br><span class="line">        $reduct = 0;</span><br><span class="line">        foreach ($value as $k =&gt; $item) &#123;</span><br><span class="line">            if ($value[$k] % 2 !== 0) &#123;</span><br><span class="line">                $value[$k] -= 1;</span><br><span class="line">                $reduct++;</span><br><span class="line">            &#125;</span><br><span class="line">            $length += $value[$k];</span><br><span class="line">        &#125;</span><br><span class="line">        if ($reduct &gt; 0 &amp;&amp; $length % 2 === 0) &#123;</span><br><span class="line">            $length += 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return $length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提交结果：<br><img src="/./images/leetcode%E5%9B%9E%E6%96%87%E4%B8%B2.png" alt="leetcode回文串" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-64.最小路径和</title>
      <link href="/2023/10/02/LeetCode64/"/>
      <url>/2023/10/02/LeetCode64/</url>
      
        <content type="html"><![CDATA[<h1 id="LeeCode-64-最小路径和"><a href="#LeeCode-64-最小路径和" class="headerlink" title="LeeCode-64.最小路径和"></a>LeeCode-64.最小路径和</h1><h2 id="LeeCode题目概述"><a href="#LeeCode题目概述" class="headerlink" title="LeeCode题目概述"></a>LeeCode题目概述</h2><blockquote><p>给定一个包含非负整数的 m * n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。<br><strong>说明：</strong>每次只能向下或者向右移动一步。</p></blockquote><ul><li><p>事例1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[1,3,1],[1,5,1],[4,2,1]]</span><br><span class="line">输出：7</span><br><span class="line">解释：因为路径 1→3→1→1→1 的总和最小。</span><br></pre></td></tr></table></figure></li><li><p>事例2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[1,2,3],[4,5,6]]</span><br><span class="line">输出：12</span><br></pre></td></tr></table></figure></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>动态规划</li></ul><p>由于路径的方向只能是向下或者向右，因此网格的第一行的每一个元素只能从左上角元素开始向右移动到达，网格的第一列的每个元素只能从左上角元素开始向下移动到达，此时的路径是唯一的，因此每个元素对应的最小路径和即为对应的路径上的数字总和。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原地处理[][]int</span></span><br><span class="line"><span class="comment">// 空间复杂度O1</span></span><br><span class="line"><span class="comment">// 时间复杂度O(mn)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minPathSum</span><span class="params">(grid [][]<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">// 处理 grid 为空的情况</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(grid) == <span class="number">0</span> || <span class="built_in">len</span>(grid[<span class="number">0</span>]) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 行长度、列长度</span></span><br><span class="line">    rows, columns := <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">// 遍历，原地处理原[][]int</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; rows; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; columns; j++ &#123;</span><br><span class="line">            <span class="comment">// 如果为第一行第一列的位置不处理</span></span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> i == <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span> &#123;<span class="comment">// 第一行的元素数值累加</span></span><br><span class="line">                grid[i][j] = grid[i][j] + grid[i][j<span class="number">-1</span>]</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; j == <span class="number">0</span> &#123;<span class="comment">// 第一列的元素数值累加</span></span><br><span class="line">                grid[i][j] = grid[i][j] + grid[i<span class="number">-1</span>][j]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// 通过i-1和j-1的元素数值计算最小值</span></span><br><span class="line">                value := <span class="number">0</span></span><br><span class="line">                <span class="comment">// 最小值</span></span><br><span class="line">                <span class="keyword">if</span> grid[i<span class="number">-1</span>][j] &gt; grid[i][j<span class="number">-1</span>] &#123;</span><br><span class="line">                    value = grid[i][j<span class="number">-1</span>]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    value = grid[i<span class="number">-1</span>][j]</span><br><span class="line">                &#125;</span><br><span class="line">                grid[i][j] = grid[i][j] + value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最终结果</span></span><br><span class="line">    <span class="keyword">return</span> grid[rows<span class="number">-1</span>][columns<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
            <tag> Golang </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP7源码安装</title>
      <link href="/2023/10/02/PHP7%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/"/>
      <url>/2023/10/02/PHP7%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<ol><li>下载压缩包</li></ol><p><code>wget  https://www.php.net/distributions/php-7.3.8.tar.bz2</code></p><ol start="2"><li>解压</li></ol><p><code>tar -xjvf php-7.3.8.tar.bz2</code></p><ol start="3"><li>编译</li></ol><blockquote><p>.&#x2F;configure –perfix&#x3D;&#x2F;home&#x2F;study&#x2F;soft&#x2F;php</p><p>编译时报了一个错误：</p><p>configure: error: libxml2 not found. Please check your libxml2 installation.</p><p>原本以为是缺少libxml2的安装，后来查阅了百度，是缺少了libxml2-dev</p><p>安装命令：</p><p><code>yum install libxml2-devel </code></p></blockquote><ol start="4"><li>make(构建)</li></ol><p><code>make</code>    <code>make test</code>  <code>make install</code></p><ol start="5"><li>查看一下php的扩展</li></ol><p><code>./bin/php -m</code></p><ol start="6"><li>测试一下</li></ol><p><code>vi test.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo time();//输出当前的时间</span><br></pre></td></tr></table></figure><ul><li>结果如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_2_centos php]# ./bin/php test.php </span><br><span class="line">1566919402[root@VM_0_2_centos php]# ./bin/php test.php </span><br></pre></td></tr></table></figure><ol start="7"><li>简化php命令</li></ol><ul><li>编辑目录下的.bash_profile文件</li></ul><p><code>vi ~/.bash_profile</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># .bash_profile</span><br><span class="line"></span><br><span class="line"># Get the aliases and functions</span><br><span class="line">if [ -f ~/.bashrc ]; then</span><br><span class="line">        . ~/.bashrc</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># User specific environment and startup programs</span><br><span class="line"></span><br><span class="line">PATH=$PATH:$HOME/bin</span><br><span class="line"></span><br><span class="line">export PATH</span><br><span class="line">alias php=/home/study/soft/php/bin/php</span><br></pre></td></tr></table></figure><p>再执行<code>source ~/.bash_profile</code>，简化php命令完成。</p><ol start="8"><li>php7源码安装遇到的坑</li></ol><ul><li>gcc autoconfig没有安装,或者是其他软件没有安装</li><li>上面提到的libxml2-dev的安装</li><li>编译后没有php.ini文件</li></ul><blockquote><p>返回解压后的php安装包，将php.ini-development复制到安装目录下</p><p><code>cp php.ini-development /home/study/soft/php/etc/</code></p><p>回到安装目录下修改文件名称</p><p><code> mv php.ini-development php.ini</code></p><p>当前环境的话修改<code>php.ini</code>配置不会生效，因为有效的php.ini在安装目录下的<code>/lib</code>下</p><p>使用<code>php -i | grep php.ini</code>查看</p><p>将php.ini移动到lib下面</p><p><code>mv ./etc/php.ini ./lib</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPStorm必备插件</title>
      <link href="/2023/10/02/PHPStorm%E5%BF%85%E5%A4%87%E6%8F%92%E4%BB%B6/"/>
      <url>/2023/10/02/PHPStorm%E5%BF%85%E5%A4%87%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<ol><li>PHP Inspections</li><li>ideolog</li><li>Markdown support</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHPStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swoole</title>
      <link href="/2023/10/02/Swoole/"/>
      <url>/2023/10/02/Swoole/</url>
      
        <content type="html"><![CDATA[<blockquote><p>swoole是面向生产环境的PHP异步网络通信引擎</p><p>使PHP开发人员可以编写高性能的异步并发TCP、UDP、Unix Socket、HTTP，WebSocket 服务。Swoole 可以广泛应用于互联网、移动通信、企业软件、云计算、网络游戏、物联网（IOT）、车联网、智能家居等领域。 使用 PHP + Swoole 作为网络通信框架，可以使企业 IT 研发团队的效率大大提升，更加专注于开发创新产品。 </p></blockquote><h2 id="一、TCP服务器"><a href="#一、TCP服务器" class="headerlink" title="一、TCP服务器"></a>一、TCP服务器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">// 创建服务器</span><br><span class="line"></span><br><span class="line">// $serv = new swoole_server($host,$port,$mode,$sock_type);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line">* $host : 127.0.0.1 本地IP</span><br><span class="line"></span><br><span class="line">* 192.168.50.133 监听对应外网IP</span><br><span class="line"></span><br><span class="line">* 0.0.0.0</span><br><span class="line"></span><br><span class="line">* ipv4 / ipv6 ::0</span><br><span class="line"></span><br><span class="line">* $port : 端口号</span><br><span class="line"></span><br><span class="line">* 1024以下：root</span><br><span class="line"></span><br><span class="line">* 9501</span><br><span class="line"></span><br><span class="line">* $mode：SWOOLE PROCESS 多进程的方式</span><br><span class="line"></span><br><span class="line">* $socket_type:SWOOLE_SOCK_TCP</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">$host = ‘0.0.0.0’;// string$</span><br><span class="line"></span><br><span class="line">$port = 9501;// int</span><br><span class="line"></span><br><span class="line">$serv = new swoole_server($host,$port);</span><br><span class="line"></span><br><span class="line">// 使用</span><br><span class="line"></span><br><span class="line">// bool $swoole_server-&gt;on(string $event,$mixed $callback);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line">* $event:</span><br><span class="line"></span><br><span class="line">* connect：当建立连接的时候 $serv:服务器信息,$fd:客户端信息</span><br><span class="line"></span><br><span class="line">* receive：当接收到数据 $serv:服务器信息,$fd:客户端,$from_id:ID,$data:数据</span><br><span class="line"></span><br><span class="line">* close：关闭连接</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">$serv-&gt;on(‘connect’,function($serv,$fd)&#123;</span><br><span class="line"></span><br><span class="line">​ var_dump($serv);</span><br><span class="line"></span><br><span class="line">​ var_dump($fd);</span><br><span class="line"></span><br><span class="line">​ echo “建立连接\n”;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$serv-&gt;on(‘receive’,function($serv,$fd,$from_id,$data)&#123;</span><br><span class="line"></span><br><span class="line">​ echo “接收到数据\n”;</span><br><span class="line"></span><br><span class="line">​ var_dump($data);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$serv-&gt;on(‘close’,function($serv,$fd)&#123;</span><br><span class="line"></span><br><span class="line">​ echo “连接关闭”;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$serv-&gt;start();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Linux </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP基于字典树算法实现搜索联想功能</title>
      <link href="/2023/10/02/PHP%E5%9F%BA%E4%BA%8E%E5%AD%97%E5%85%B8%E6%A0%91%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E8%81%94%E6%83%B3%E5%8A%9F%E8%83%BD/"/>
      <url>/2023/10/02/PHP%E5%9F%BA%E4%BA%8E%E5%AD%97%E5%85%B8%E6%A0%91%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E8%81%94%E6%83%B3%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章来源：<a href="https://blog.csdn.net/u011897301/article/details/102861207">https://blog.csdn.net/u011897301/article/details/102861207</a></p></blockquote><p>搜索联想功能是各大搜索引擎具备的基础功能，如下图所示，这个功能简化了用户的输入行为，并且能够给用户推荐热门的搜索词，下面我们来讲一下如何用php实现搜索联想的功能。</p><p><img src="/./images/%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2.png" alt="百度搜索" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>搜索联想功能拆解一下由两部分组成</p><ol><li>给定一个查询词，找出以他为前缀的其他目标查询词</li><li>对目标查询词进行排序，选出权重高的若干个查询词</li></ol><p>本篇中重点讲解一下第一部分的实现，这里使用Trie树，也叫字典树，这个数据结构来解决这个问题。通过Trie树可以很方便快速的找到已该字符串为前缀的目标字符串。</p><h2 id="什么是Trie树"><a href="#什么是Trie树" class="headerlink" title="什么是Trie树"></a>什么是Trie树</h2><p>Trie树，即字典树，又称单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较，查询效率往往比哈希表高。</p><p>Trie的核心思想是空间换时间。利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。</p><p>它有3个基本性质：</p><ol><li>根节点不包含字符，除根节点外每一个节点都只包含一个字符。</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</li><li>每个节点的所有子节点包含的字符都不相同。</li></ol><p>假如我们有如下字符串<br>hello，hi，today，touch，weak<br>那么构造出来的Trie树如下图所示</p><p><img src="/./images/%E5%AD%97%E5%85%B8%E6%A0%91.png" alt="字典树" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p><p>当查询的时候只需要从根开始按字符沿着树进行深度遍历，就可以把已该词为前缀的其他查询词查找出来。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>用于实现搜索联想功能的核心方法有两个：</p><ol><li>将查询词的数据集构建成Trie树</li><li>查找以某个查询词为前缀的所有查询词</li></ol><h3 id="第一步：构建Trie树"><a href="#第一步：构建Trie树" class="headerlink" title="第一步：构建Trie树"></a>第一步：构建Trie树</h3><p>注意由于一个字符串有中文有英文，所以对每个字符串使用以下代码进行了分割，将字符串转化成了一个字符的数组<br><code>$charArray = preg_split(&#39;/(?&lt;!^)(?!$)/u&#39;, $str);</code><br>然后对每个字符串执行addWordToTrieTree方法，这个方法将一个词加入到Trie树中，这里用到了递归的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 将字符串的数组构建成Trie树</span><br><span class="line"> *</span><br><span class="line"> * @param [array] $strList</span><br><span class="line"> * @return array</span><br><span class="line"> */</span><br><span class="line">public function buildTrieTree($strList)</span><br><span class="line">&#123;</span><br><span class="line">    $tree = [];</span><br><span class="line">    foreach ($strList as $str) &#123;</span><br><span class="line">        $charArray = preg_split(&#x27;/(?&lt;!^)(?!$)/u&#x27;, $str);</span><br><span class="line">        $tree = $this-&gt;addWordToTrieTree($charArray, $tree);</span><br><span class="line">    &#125;</span><br><span class="line">    return $tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 把一个词加入到Trie树中</span><br><span class="line"> *</span><br><span class="line"> * @param [type] $charArray</span><br><span class="line"> * @param [type] $tree</span><br><span class="line"> * @return array</span><br><span class="line"> */</span><br><span class="line">public function addWordToTrieTree($charArray, $tree)</span><br><span class="line">&#123;</span><br><span class="line">    if (count($charArray) === 0) &#123;</span><br><span class="line">        return [];</span><br><span class="line">    &#125;</span><br><span class="line">    $char = $charArray[0];</span><br><span class="line"></span><br><span class="line">    $leftStr = array_slice($charArray, 1);</span><br><span class="line">    $tree[$char] = $this-&gt;addWordToTrieTree($leftStr, $tree[$char]);</span><br><span class="line">    return $tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询前缀词"><a href="#查询前缀词" class="headerlink" title="查询前缀词"></a>查询前缀词</h3><p>查询前缀词即给定一个字符串，查询树中所有以该串为前缀的字符串，也就是联想的过程。<br>首先调用findSubTree方法，从Trie中找到该前缀所在的子树，然后调用traverseTree方法，遍历这颗子树，把所有的字符串都提取出来，这里也是用了递归的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param $prefix</span><br><span class="line"> * @return array</span><br><span class="line"> */</span><br><span class="line">public function queryPrefix($prefix)</span><br><span class="line">&#123;</span><br><span class="line">    $charArray = preg_split(&#x27;/(?&lt;!^)(?!$)/u&#x27;, $prefix);</span><br><span class="line">    $subTree = $this-&gt;findSubTree($charArray, $this-&gt;tree);</span><br><span class="line"></span><br><span class="line">    $words = $this-&gt;traverseTree($subTree);</span><br><span class="line"></span><br><span class="line">    foreach ($words as &amp;$word) &#123;</span><br><span class="line">        $word = $prefix . $word;</span><br><span class="line">    &#125;</span><br><span class="line">    return $words;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 查找子树</span><br><span class="line"> * @param $charArray</span><br><span class="line"> * @param $tree</span><br><span class="line"> * @return array|mixed</span><br><span class="line"> */</span><br><span class="line">public function findSubTree($charArray, $tree)</span><br><span class="line">&#123;</span><br><span class="line">    foreach ($charArray as $char) &#123;</span><br><span class="line">        if (array_key_exists($char, $tree)) &#123;</span><br><span class="line">            $tree = $tree[$char];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return [];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 遍历树</span><br><span class="line"> * @param $tree</span><br><span class="line"> * @return array</span><br><span class="line"> */</span><br><span class="line">public function traverseTree($tree)</span><br><span class="line">&#123;</span><br><span class="line">    $words = [];</span><br><span class="line">    foreach ($tree as $node =&gt; $subTree) &#123;</span><br><span class="line">        if (empty($subTree)) &#123;</span><br><span class="line">            $words[] = $node;</span><br><span class="line">            return $words;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $chars = $this-&gt;traverseTree($subTree);</span><br><span class="line">        foreach ($chars as $char) &#123;</span><br><span class="line">            $words[] = $node . $char;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $words;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码与测试结果"><a href="#代码与测试结果" class="headerlink" title="代码与测试结果"></a>代码与测试结果</h2><p>完整代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Class TrieTree</span><br><span class="line"> */</span><br><span class="line">class TrieTree</span><br><span class="line">&#123;</span><br><span class="line">    private $tree;</span><br><span class="line"></span><br><span class="line">    public function __construct($strList)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;tree = $this-&gt;buildTrieTree($strList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param $prefix</span><br><span class="line">     * @return array</span><br><span class="line">     */</span><br><span class="line">    public function queryPrefix($prefix)</span><br><span class="line">    &#123;</span><br><span class="line">        $charArray = preg_split(&#x27;/(?&lt;!^)(?!$)/u&#x27;, $prefix);</span><br><span class="line">        $subTree = $this-&gt;findSubTree($charArray, $this-&gt;tree);</span><br><span class="line"></span><br><span class="line">        $words = $this-&gt;traverseTree($subTree);</span><br><span class="line"></span><br><span class="line">        foreach ($words as &amp;$word) &#123;</span><br><span class="line">            $word = $prefix . $word;</span><br><span class="line">        &#125;</span><br><span class="line">        return $words;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查找子树</span><br><span class="line">     * @param $charArray</span><br><span class="line">     * @param $tree</span><br><span class="line">     * @return array|mixed</span><br><span class="line">     */</span><br><span class="line">    public function findSubTree($charArray, $tree)</span><br><span class="line">    &#123;</span><br><span class="line">        foreach ($charArray as $char) &#123;</span><br><span class="line">            if (array_key_exists($char, $tree)) &#123;</span><br><span class="line">                $tree = $tree[$char];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return [];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return $tree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 遍历树</span><br><span class="line">     * @param $tree</span><br><span class="line">     * @return array</span><br><span class="line">     */</span><br><span class="line">    public function traverseTree($tree)</span><br><span class="line">    &#123;</span><br><span class="line">        $words = [];</span><br><span class="line">        foreach ($tree as $node =&gt; $subTree) &#123;</span><br><span class="line">            if (empty($subTree)) &#123;</span><br><span class="line">                $words[] = $node;</span><br><span class="line">                return $words;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $chars = $this-&gt;traverseTree($subTree);</span><br><span class="line">            foreach ($chars as $char) &#123;</span><br><span class="line">                $words[] = $node . $char;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return $words;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将字符串的数组构建成Trie树</span><br><span class="line">     *</span><br><span class="line">     * @param [array] $strList</span><br><span class="line">     * @return array</span><br><span class="line">     */</span><br><span class="line">    public function buildTrieTree($strList)</span><br><span class="line">    &#123;</span><br><span class="line">        $tree = [];</span><br><span class="line">        foreach ($strList as $str) &#123;</span><br><span class="line">            $charArray = preg_split(&#x27;/(?&lt;!^)(?!$)/u&#x27;, $str);</span><br><span class="line">            $tree = $this-&gt;addWordToTrieTree($charArray, $tree);</span><br><span class="line">        &#125;</span><br><span class="line">        return $tree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 把一个词加入到Trie树中</span><br><span class="line">     *</span><br><span class="line">     * @param [type] $charArray</span><br><span class="line">     * @param [type] $tree</span><br><span class="line">     * @return array</span><br><span class="line">     */</span><br><span class="line">    public function addWordToTrieTree($charArray, $tree)</span><br><span class="line">    &#123;</span><br><span class="line">        if (count($charArray) === 0) &#123;</span><br><span class="line">            return [];</span><br><span class="line">        &#125;</span><br><span class="line">        $char = $charArray[0];</span><br><span class="line"></span><br><span class="line">        $leftStr = array_slice($charArray, 1);</span><br><span class="line">        $tree[$char] = $this-&gt;addWordToTrieTree($leftStr, $tree[$char]);</span><br><span class="line">        return $tree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @return array</span><br><span class="line">     */</span><br><span class="line">    public function getTree()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;tree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$strList = [&#x27;春风十里&#x27;, &#x27;春天在哪里&#x27;, &#x27;一百万个可能&#x27;, &#x27;一千年以后&#x27;, &#x27;后来&#x27;, &#x27;后来的我们&#x27;, &#x27;春天里&#x27;, &#x27;后会无期&#x27;];</span><br><span class="line">$trieTree = new TrieTree($strList);</span><br><span class="line">print_r($trieTree-&gt;getTree());</span><br><span class="line"></span><br><span class="line">$prefix = &#x27;春天&#x27;;</span><br><span class="line">$queryRes = $trieTree-&gt;queryPrefix($prefix);</span><br><span class="line">print_r($queryRes);</span><br></pre></td></tr></table></figure><p>将’春风十里’,‘春天在哪里’,‘一百万个可能’,‘一千年以后’,‘后来’,‘后来的我们’,‘春天里’,’后会无期’这些歌名作为数据集，构建一个Trie树并进行测试。<br>可以看到输出以下结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">Trie树：</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [春] =&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [风] =&gt; Array</span><br><span class="line">                (</span><br><span class="line">                    [十] =&gt; Array</span><br><span class="line">                        (</span><br><span class="line">                            [里] =&gt; Array</span><br><span class="line">                                (</span><br><span class="line">                                )</span><br><span class="line"></span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            [天] =&gt; Array</span><br><span class="line">                (</span><br><span class="line">                    [在] =&gt; Array</span><br><span class="line">                        (</span><br><span class="line">                            [哪] =&gt; Array</span><br><span class="line">                                (</span><br><span class="line">                                    [里] =&gt; Array</span><br><span class="line">                                        (</span><br><span class="line">                                        )</span><br><span class="line"></span><br><span class="line">                                )</span><br><span class="line"></span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line">                    [里] =&gt; Array</span><br><span class="line">                        (</span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [一] =&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [百] =&gt; Array</span><br><span class="line">                (</span><br><span class="line">                    [万] =&gt; Array</span><br><span class="line">                        (</span><br><span class="line">                            [个] =&gt; Array</span><br><span class="line">                                (</span><br><span class="line">                                    [可] =&gt; Array</span><br><span class="line">                                        (</span><br><span class="line">                                            [能] =&gt; Array</span><br><span class="line">                                                (</span><br><span class="line">                                                )</span><br><span class="line"></span><br><span class="line">                                        )</span><br><span class="line"></span><br><span class="line">                                )</span><br><span class="line"></span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            [千] =&gt; Array</span><br><span class="line">                (</span><br><span class="line">                    [年] =&gt; Array</span><br><span class="line">                        (</span><br><span class="line">                            [以] =&gt; Array</span><br><span class="line">                                (</span><br><span class="line">                                    [后] =&gt; Array</span><br><span class="line">                                        (</span><br><span class="line">                                        )</span><br><span class="line"></span><br><span class="line">                                )</span><br><span class="line"></span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [后] =&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [来] =&gt; Array</span><br><span class="line">                (</span><br><span class="line">                    [的] =&gt; Array</span><br><span class="line">                        (</span><br><span class="line">                            [我] =&gt; Array</span><br><span class="line">                                (</span><br><span class="line">                                    [们] =&gt; Array</span><br><span class="line">                                        (</span><br><span class="line">                                        )</span><br><span class="line"></span><br><span class="line">                                )</span><br><span class="line"></span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            [会] =&gt; Array</span><br><span class="line">                (</span><br><span class="line">                    [无] =&gt; Array</span><br><span class="line">                        (</span><br><span class="line">                            [期] =&gt; Array</span><br><span class="line">                                (</span><br><span class="line">                                )</span><br><span class="line"></span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">查询以“春为前缀的字符串”</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; 春风十里</span><br><span class="line">    [1] =&gt; 春天在哪里</span><br><span class="line">    [2] =&gt; 春天里</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>告别虚拟机，Windows10下开启Linux子系统</title>
      <link href="/2023/10/02/Windows%E4%B8%8B%E5%BC%80%E5%90%AFLinux%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/10/02/Windows%E4%B8%8B%E5%BC%80%E5%90%AFLinux%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p><img src="/./images/%E7%B3%BB%E7%BB%9F%E8%A6%81%E6%B1%82.png" alt="系统要求" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p><h2 id="开启子系统"><a href="#开启子系统" class="headerlink" title="开启子系统"></a>开启子系统</h2><ol><li><p>查看系统版本号<br>按win + R，输入winver命令，出现系统版本号信息，我的系统版本号为18363.900<br><img src="/./images/%E7%89%88%E6%9C%AC%E5%8F%B7.png" alt="系统要求" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>如果版本过低，可以先升级Windows版本符合要求后再开启子系统。</p></li><li><p>系统设置<br>开启-设置-更新和安全-开发者选项-开发人员模式<br><img src="/./images/%E5%BC%80%E5%90%AF%E5%BC%80%E5%8F%91%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt="系统要求" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p></li><li><p>启动适用于Linux的Windows子系统<br>返回设置页面，选择 应用-程序和功能-启用或关闭Windows功能-选择适用于Linux的Windows子系统<br><img src="/./images/%E5%BC%80%E5%90%AF%E5%AD%90%E7%B3%BB%E7%BB%9F.png" alt="系统要求" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p></li><li><p>下载Linux系统并安装<br>开始-Microsoft Store-搜索Linux-选择Ubuntu-安装下载(下载速度有点慢)<br><img src="/./images/%E6%90%9C%E7%B4%A2Linux.png" alt="系统要求" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/./images/Linux.png" alt="系统要求" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/./images/%E5%AE%89%E8%A3%85Linux.png" alt="系统要求" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>希望官方可以早点发行个CentOS或者红帽子也行(哭、跪求</p></li><li><p>打开、设置Ubuntu<br>设置Linux用户名和密码、设置root用户密码、切换root用户升级apt<br><img src="/./images/%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.png" alt="系统要求" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/./images/%E8%AE%BE%E7%BD%AEroot%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.png" alt="设置root账号密码" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/./images/%E5%88%87%E6%8D%A2root%E3%80%81%E6%9B%B4%E6%96%B0.png" alt="切换root、更新" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p></li></ol><p>Ubuntu系统到这里就已经安装完成了！</p><h2 id="与Windows共享文件夹"><a href="#与Windows共享文件夹" class="headerlink" title="与Windows共享文件夹"></a>与Windows共享文件夹</h2><p>输入<code>mount</code>命令，可以看到当前电脑的其他盘符都mount（挂载）到&#x2F;mnt&#x2F;c, &#x2F;mnt&#x2F;d,&#x2F;mnt&#x2F;e中，这个就是对应的linux系统中的目录<br><img src="/./images/mount.png" alt="mount" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><code>cd /mnt/c</code>进入到c盘根目录下，<code>ls</code>可以查看c盘对应的所有文件。</p><p>这样就可以直接使用Linux系统运行项目了！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang中&amp;和*的区别</title>
      <link href="/2023/10/02/golang%E4%B8%AD-%E5%92%8C-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/10/02/golang%E4%B8%AD-%E5%92%8C-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="和-的区别："><a href="#和-的区别：" class="headerlink" title="&amp;和*的区别："></a>&amp;和*的区别：</h4><ol><li>&amp;是取地址符号,即取得某个变量的地址,如&amp;a</li><li>*是指针运算符,可以表示一个变量是指针类型,也可以表示一个指针变量所指向的存储单元,也就是这个地址所存储的值。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-1389.按既定顺序创建目标数组</title>
      <link href="/2023/10/02/LeetCode1389/"/>
      <url>/2023/10/02/LeetCode1389/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><ul><li><strong>难度</strong>：<span style="color:green;">简单</span></li><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/create-target-array-in-the-given-order/">https://leetcode-cn.com/problems/create-target-array-in-the-given-order/</a></li><li><strong>语言：</strong> PHP</li><li><strong>题目内容</strong>：<br>给你两个整数数组 nums 和 index。你需要按照以下规则创建目标数组：</li><li>目标数组 target 最初为空。</li><li>按从左到右的顺序依次读取 nums[i] 和 index[i]，在 target 数组中的下标 index[i] 处插入值 nums[i] 。</li><li>重复上一步，直到在 nums 和 index 中都没有要读取的元素。<br>请你返回目标数组。<br>题目保证数字插入位置总是存在。</li></ul><p><strong>示例 1</strong>：<br><strong>输入：</strong>nums &#x3D; [0,1,2,3,4], index &#x3D; [0,1,2,2,1]<br><strong>输出：</strong>[0,4,1,3,2]<br><strong>解释：</strong> </p><table><thead><tr><th>nums</th><th>index</th><th>target</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>[0]</td></tr><tr><td>1</td><td>1</td><td>[0,1]</td></tr><tr><td>2</td><td>2</td><td>[0,1,2]</td></tr><tr><td>3</td><td>2</td><td>[0,1,3,2]</td></tr><tr><td>4</td><td>1</td><td>[0,4,1,3,2]</td></tr></tbody></table><p><strong>示例 2</strong>：<br><strong>输入：</strong>nums &#x3D; [1,2,3,4,0], index &#x3D; [0,1,2,3,0]<br><strong>输出：</strong>[0,1,2,3,4]<br><strong>解释：</strong></p><table><thead><tr><th>nums</th><th>index</th><th>target</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>[1]</td></tr><tr><td>2</td><td>1</td><td>[1,2]</td></tr><tr><td>3</td><td>2</td><td>[1,2,3]</td></tr><tr><td>4</td><td>3</td><td>[1,2,3,4]</td></tr><tr><td>0</td><td>0</td><td>[0,1,2,3,4]</td></tr></tbody></table><p><strong>示例 3</strong>：<br><strong>输入：</strong>nums &#x3D; [1], index &#x3D; [0]<br><strong>输出：</strong>[1]</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p><strong>LeetCode给定函数体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param Integer[] $nums</span><br><span class="line">     * @param Integer[] $index</span><br><span class="line">     * @return Integer[]</span><br><span class="line">     */</span><br><span class="line">    function createTargetArray($nums, $index) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>判断当前数组位置是否有值, 有值则将值往后移(递归思想), 没有值则插入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @desc 递归方法</span><br><span class="line">     * @param Integer[] $nums</span><br><span class="line">     * @param Integer[] $index</span><br><span class="line">     * @return Integer[]</span><br><span class="line">     */</span><br><span class="line">    public $arr = [];</span><br><span class="line">    function createTargetArray($nums, $index) &#123;</span><br><span class="line">        foreach ($index as $key =&gt; $item) &#123;</span><br><span class="line">            $this-&gt;insert($item, $nums[$key]);</span><br><span class="line">        &#125;</span><br><span class="line">        return $this-&gt;$arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @desc 插入方法, 判断当前数组位置是否有值, 有值则将值往后移, 没有值则插入</span><br><span class="line">     * @param int $index</span><br><span class="line">     * @param int $num</span><br><span class="line">     */</span><br><span class="line">    function insert($index, $num) &#123;</span><br><span class="line">        if (!isset($this-&gt;$arr[$index])) &#123;</span><br><span class="line">            $this-&gt;$arr[$index] = $num;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $temp = $this-&gt;$arr[$index];</span><br><span class="line">            $this-&gt;insert($index + 1, $temp);</span><br><span class="line">            $this-&gt;$arr[$index] = $num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>使用递归方法，虽然说可以实现，但是耗时较长。有更好的解法可以在评论留言。</p><p><img src="/./images/1389.png" alt="1389" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p><h4 id="LeetCode其他题解"><a href="#LeetCode其他题解" class="headerlink" title="LeetCode其他题解"></a>LeetCode其他题解</h4><p>查看其他大佬分享题解，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param Integer[] $nums</span><br><span class="line">     * @param Integer[] $index</span><br><span class="line">     * @return Integer[]</span><br><span class="line">     */</span><br><span class="line">    function createTargetArray($nums, $index) &#123;</span><br><span class="line">        $target = [];</span><br><span class="line"></span><br><span class="line">        $_tmp_indexs = [];</span><br><span class="line">        foreach ($index as $i =&gt; $k) &#123;</span><br><span class="line">            if (in_array($k, $_tmp_indexs)) &#123;</span><br><span class="line">                foreach ($_tmp_indexs as &amp;$_tmp_index) &#123;</span><br><span class="line">                    if ($_tmp_index &gt;= $k) &#123;</span><br><span class="line">                        $_tmp_index ++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            $_tmp_indexs[] = $k;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        foreach ($_tmp_indexs as $i =&gt; $k) &#123;</span><br><span class="line">            $target[$k] = $nums[$i];</span><br><span class="line">        &#125;</span><br><span class="line">        ksort($target);</span><br><span class="line">        </span><br><span class="line">        return $target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路如下：<br>将index数组中的每一项遍历, 判断在插入后实际对应的下标位置得到($_tmp_index), 然后通过该映射写入到结果中。</p><blockquote><p>题解链接：<a href="https://leetcode-cn.com/problems/create-target-array-in-the-given-order/solution/xian-chu-li-indexshu-zu-by-xiao-san-niang/">https://leetcode-cn.com/problems/create-target-array-in-the-given-order/solution/xian-chu-li-indexshu-zu-by-xiao-san-niang/</a></p></blockquote><p>运行结果如下：</p><p><img src="/./images/1389-tijie.png" alt="1389-tijie" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2023/10/02/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/10/02/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h2><p>单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br><strong>注意：</strong></p><ol><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li></ol><blockquote><p>此概念引用于菜鸟教程-单例模式：<br><a href="https://www.runoob.com/design-pattern/singleton-pattern.html">https://www.runoob.com/design-pattern/singleton-pattern.html</a></p></blockquote><h2 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Database</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @var Database</span><br><span class="line">     */</span><br><span class="line">    private static $db;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将构造方法设为私有，不允许new</span><br><span class="line">     * Database constructor.</span><br><span class="line">     */</span><br><span class="line">    private function __construct()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 单例模式</span><br><span class="line">     * @return Database</span><br><span class="line">     */</span><br><span class="line">    public static function getInstance (): \Database</span><br><span class="line">    &#123;</span><br><span class="line">        // 判断是否存在该变量</span><br><span class="line">        if (!self::$db) &#123;</span><br><span class="line">            self::$db = new self();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return self::$db;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$db = Database::getInstance();</span><br><span class="line">$db1 = Database::getInstance();</span><br><span class="line">var_dump($db, $db1);</span><br></pre></td></tr></table></figure><p>代码运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Database#1 (0) &#123;</span><br><span class="line">&#125;</span><br><span class="line">class Database#1 (0) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此看出，根据对象id可知道两次获取到的<code>$db</code>都是同一个。</p><h2 id="单例模式应用场景"><a href="#单例模式应用场景" class="headerlink" title="单例模式应用场景"></a>单例模式应用场景</h2><p>主要应用场合就是应用程序与数据库打交道的场景，在一个应用中会存在大量的数据库操作，针对数据库句柄连接数据库的行为，使用单例模式可以避免大量的new操作。因为每一次new操作都会消耗系统和内存的资源。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2023/10/02/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/10/02/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是工厂模式"><a href="#什么是工厂模式" class="headerlink" title="什么是工厂模式"></a>什么是工厂模式</h2><p>组装一台电脑，需要不同的零件，而工厂模式就像零件制造商一样，不同的零件不同的工厂负责或者管理着不同的零件工厂，将代码进行解耦，不需要在逻辑代码中new不同的类，进行一个统一的管理。</p><h2 id="工厂模式的实现"><a href="#工厂模式的实现" class="headerlink" title="工厂模式的实现"></a>工厂模式的实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 一个运算方法的接口</span><br><span class="line"> * Interface Operation</span><br><span class="line"> */</span><br><span class="line">interface Operation</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 两个数的运算</span><br><span class="line">     * @param int $num1</span><br><span class="line">     * @param int $num2</span><br><span class="line">     * @return int</span><br><span class="line">     */</span><br><span class="line">    public function getVal (int $num1, int $num2): int;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 加法</span><br><span class="line"> * Class Add</span><br><span class="line"> */</span><br><span class="line">class Add implements Operation</span><br><span class="line">&#123;</span><br><span class="line">    public function getVal(int $num1, int $num2): int</span><br><span class="line">    &#123;</span><br><span class="line">        return $num1 + $num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 减法</span><br><span class="line"> * Class Sub</span><br><span class="line"> */</span><br><span class="line">class Sub implements Operation</span><br><span class="line">&#123;</span><br><span class="line">    public function getVal(int $num1, int $num2): int</span><br><span class="line">    &#123;</span><br><span class="line">        return $num1 - $num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 运算工厂（工厂模式）</span><br><span class="line"> * Class CounterFactory</span><br><span class="line"> */</span><br><span class="line">class CounterFactory</span><br><span class="line">&#123;</span><br><span class="line">    private static $operation;// 运算</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建一个运算</span><br><span class="line">     * @param string $operation</span><br><span class="line">     * @return Add|Sub</span><br><span class="line">     */</span><br><span class="line">    public static function createOperation (string $operation)</span><br><span class="line">    &#123;</span><br><span class="line">        switch ($operation) &#123;</span><br><span class="line">            case &#x27;+&#x27;:</span><br><span class="line">                self::$operation = new Add();</span><br><span class="line">                break;</span><br><span class="line">            case &#x27;-&#x27;:</span><br><span class="line">                self::$operation = new Sub();</span><br><span class="line">                break;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return self::$operation;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$factory = CounterFactory::createOperation(&#x27;+&#x27;);</span><br><span class="line">$res = $factory-&gt;getVal(1, 2);</span><br><span class="line">var_dump($res);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/2023/10/02/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/10/02/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是观察者模式"><a href="#什么是观察者模式" class="headerlink" title="什么是观察者模式"></a>什么是观察者模式</h2><p>当一个对象状态发送改变时，依赖它的对象全部会受到通知，并自动更新。观察者模式实现了低耦合的通知机制。<br>可用于通知或更新操作，进行解耦，避免在原来代码上修改逻辑代码。</p><h2 id="观察者模式场景"><a href="#观察者模式场景" class="headerlink" title="观察者模式场景"></a>观察者模式场景</h2><p>一个事件发生后，要执行一连串更新操作。传统的方式就是在事件的代码后加入处理逻辑，当更新的逻辑增多之后，代码会变得难以维护。这种方式是耦合的，增加新的逻辑或删除旧的逻辑需要修改事件的主体代码。</p><h2 id="观察者模式的实现"><a href="#观察者模式的实现" class="headerlink" title="观察者模式的实现"></a>观察者模式的实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 事件生成器</span><br><span class="line"> * Class EventGenerator</span><br><span class="line"> */</span><br><span class="line">abstract class EventGenerator</span><br><span class="line">&#123;</span><br><span class="line">    private $observes = [];// 观察者数组</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加观察者</span><br><span class="line">     * @param Observe $observe</span><br><span class="line">     */</span><br><span class="line">    public function addObserve(Observe $observe)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;observes[] = $observe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 通知</span><br><span class="line">     */</span><br><span class="line">    public function notify()</span><br><span class="line">    &#123;</span><br><span class="line">        foreach ($this-&gt;observes as $observe) &#123;</span><br><span class="line">            $observe-&gt;update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 观察者接口</span><br><span class="line"> * Interface Observe</span><br><span class="line"> */</span><br><span class="line">interface Observe</span><br><span class="line">&#123;</span><br><span class="line">    public function update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 事件</span><br><span class="line"> * Class User</span><br><span class="line"> */</span><br><span class="line">class User extends EventGenerator</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 发送通知</span><br><span class="line">     */</span><br><span class="line">    public function send()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;给用户发送通知...&#x27;;</span><br><span class="line">        $this-&gt;notify();</span><br><span class="line">        echo &#x27;发送成功！&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 邮件观察者</span><br><span class="line"> * Class EmailObserve</span><br><span class="line"> */</span><br><span class="line">class EmailObserve implements Observe</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    public function update()</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement update() method.</span><br><span class="line">        echo &#x27;发送邮件...&#x27;;</span><br><span class="line">        // 邮件发送逻辑...</span><br><span class="line">        echo &#x27;邮件发送成功...&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 短信观察者</span><br><span class="line"> * Class SMSObserve</span><br><span class="line"> */</span><br><span class="line">class SMSObserve implements Observe</span><br><span class="line">&#123;</span><br><span class="line">    public function update()</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement update() method.</span><br><span class="line">        echo &#x27;发送短信...&#x27;;</span><br><span class="line">        // 短信发送逻辑...</span><br><span class="line">        echo &#x27;短信发送成功...&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$user = new User();</span><br><span class="line">// 添加观察者</span><br><span class="line">$user-&gt;addObserve(new EmailObserve());</span><br><span class="line">$user-&gt;addObserve(new SMSObserve());</span><br><span class="line">// 发送</span><br><span class="line">$user-&gt;send();</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ php Observe.php</span><br><span class="line">给用户发送通知...发送邮件...邮件发送成功...发送短信...短信发送成功...发送成功！</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注册树模式</title>
      <link href="/2023/10/02/%E6%B3%A8%E5%86%8C%E6%A0%91%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/10/02/%E6%B3%A8%E5%86%8C%E6%A0%91%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是注册树模式"><a href="#什么是注册树模式" class="headerlink" title="什么是注册树模式"></a>什么是注册树模式</h2><p>注册树模式也叫注册模式或注册器模式。注册树模式将对象实例注册到一棵全局的对象树上，需要的时候从对象树上获取即可。方便去调用这些对象，便于统筹管理安排。</p><h2 id="注册树模式的优点"><a href="#注册树模式的优点" class="headerlink" title="注册树模式的优点"></a>注册树模式的优点</h2><p>单例模式创建唯一对象的过程本身还有一种判断，即判断对象是否存在，存在则返回对象，不存在则创建对象并返回。 工厂模式更多考虑的是扩展维护的问题。 总的来说，单例模式和工厂模式可以产生更加合理的对象。怎么方便调用这些对象呢？注册树模式是一种不错的选择。不管是通过单例模式还是工厂模式还是二者结合生成的对象，都统统给我插入到注册树上，用某个对象的时候，直接从注册树上获取即可。</p><blockquote><p>引用于 <a href="http://www.36nu.com/post/132.html">http://www.36nu.com/post/132.html</a></p></blockquote><h2 id="注册树模式的实现"><a href="#注册树模式的实现" class="headerlink" title="注册树模式的实现"></a>注册树模式的实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 注册树模式</span><br><span class="line"> * Class Register</span><br><span class="line"> */</span><br><span class="line">class Register</span><br><span class="line">&#123;</span><br><span class="line">    protected static $objects = [];// 注册数组</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注册</span><br><span class="line">     * @param string $alias</span><br><span class="line">     * @param object $object</span><br><span class="line">     */</span><br><span class="line">    public static function set(string $alias, $object)</span><br><span class="line">    &#123;</span><br><span class="line">        self::$objects[$alias] = $object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 撤销注册</span><br><span class="line">     * @param string $alias</span><br><span class="line">     */</span><br><span class="line">    public static function _unset(string $alias)</span><br><span class="line">    &#123;</span><br><span class="line">        unset(self::$objects[$alias]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取</span><br><span class="line">     * @param $alias</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public static function  get($alias)</span><br><span class="line">    &#123;</span><br><span class="line">        return self::$objects[$alias];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Db</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">$db = new Db();</span><br><span class="line">Register::set(&#x27;db&#x27;, $db);</span><br><span class="line">$result = Register::get(&#x27;db&#x27;);</span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="/2023/10/02/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/10/02/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是责任链模式"><a href="#什么是责任链模式" class="headerlink" title="什么是责任链模式"></a>什么是责任链模式</h2><p>责任链模式（Chain Of Responisibility）：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><h2 id="责任链模式的实现"><a href="#责任链模式的实现" class="headerlink" title="责任链模式的实现"></a>责任链模式的实现</h2><p>这里用责任链模式写一个中间件来做示范，先新建一个抽象中间件处理类</p><p>MiddlewareHandler.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Middleware;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Class MiddlewareHandler</span><br><span class="line"> * @package Middleware</span><br><span class="line"> */</span><br><span class="line">abstract class MiddlewareHandler</span><br><span class="line">&#123;</span><br><span class="line">    // 下一个处理者</span><br><span class="line">    private $nextHandler;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @desc 处理方法</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    abstract protected function handler();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @desc 设置下一个处理者</span><br><span class="line">     * @param MiddlewareHandler $handler</span><br><span class="line">     * @return $this</span><br><span class="line">     */</span><br><span class="line">    public function setNextHandler(MiddlewareHandler $handler)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;nextHandler = $handler;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @desc 责任链实现方法</span><br><span class="line">     */</span><br><span class="line">    final public function handlerMessage()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;handler();</span><br><span class="line">        if (!empty($this-&gt;nextHandler)) &#123;</span><br><span class="line">            $this-&gt;nextHandler-&gt;handlerMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写好了抽象类之后就可以实现具体的中间件类去继承该抽象类了。中间件一般去校验签名校验jwt登录等等。<br>CheckSign.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Middleware;</span><br><span class="line"></span><br><span class="line">class CheckSign extends MiddlewareHandler</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    protected function handler()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;check sign...&#x27;.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CheckJwt.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Middleware;</span><br><span class="line"></span><br><span class="line">class CheckJwt extends MiddlewareHandler</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    protected function handler()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;check jwt...&#x27;.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间件已经实现完成了，万事俱备只欠调用</p><p>这里实现一个index.php，这里使用了两种方式去调用，一种是手动去构建责任链去调用，另外一种是将需要构建的责任链存于数组，程序去构建责任链</p><p>index.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">use Middleware\RegisterMiddleware;</span><br><span class="line"></span><br><span class="line">spl_autoload_register(function($class_name) &#123;</span><br><span class="line">    require_once str_replace(&#x27;\\&#x27;,&#x27;/&#x27;,$class_name).&#x27;.php&#x27;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc 自动实例化构建责任链</span><br><span class="line"> */</span><br><span class="line">new RegisterMiddleware();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc 手动构建</span><br><span class="line"> */</span><br><span class="line">use Middleware\CheckJwt;</span><br><span class="line">use Middleware\CheckSign;</span><br><span class="line"></span><br><span class="line">$checkJwt  = new CheckJwt();</span><br><span class="line">$checkSign = new CheckSign();</span><br><span class="line">$checkSign-&gt;setNextHandler($checkJwt);</span><br><span class="line">$checkSign-&gt;handlerMessage();</span><br></pre></td></tr></table></figure><p>程序构建责任链代码如下<br>RegisterMiddleware.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Middleware;</span><br><span class="line"></span><br><span class="line">class RegisterMiddleware</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @desc 配置中间件,责任顺序与数组内顺序一致</span><br><span class="line">     * @var array</span><br><span class="line">     */</span><br><span class="line">    protected $middlewareArr = [</span><br><span class="line">        CheckSign::class,</span><br><span class="line">        CheckJwt::class,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    protected $handler;</span><br><span class="line">    protected $middleware;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @desc 构造方法自动构建责任链</span><br><span class="line">     * RegisterMiddleware constructor.</span><br><span class="line">     */</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        foreach ($this-&gt;middlewareArr as $key =&gt; $item) &#123;</span><br><span class="line">            $next = isset($this-&gt;middlewareArr[$key + 1]) ? $this-&gt;middlewareArr[$key + 1] : null;</span><br><span class="line">            if ($key === 0) &#123;</span><br><span class="line">                $this-&gt;handler = new $item();</span><br><span class="line">                if (!empty($next)) &#123;</span><br><span class="line">                    $this-&gt;middleware = new $next();</span><br><span class="line">                    $this-&gt;handler-&gt;setNextHandler($this-&gt;middleware);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; elseif (!empty($next)) &#123;</span><br><span class="line">                $mid = new $next();</span><br><span class="line">                $this-&gt;middleware-&gt;setNextHandler($mid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;handler-&gt;handlerMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="责任链模式应用场景"><a href="#责任链模式应用场景" class="headerlink" title="责任链模式应用场景"></a>责任链模式应用场景</h2><p>责任链模式主要可以去实现过滤器拦截器、中间件和工作流等</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/2023/10/02/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/10/02/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是适配器模式"><a href="#什么是适配器模式" class="headerlink" title="什么是适配器模式"></a>什么是适配器模式</h2><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。<br>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。<br>举个栗子：<br>PHP常用的操作数据库的方法有三种：MySQL、MySQLi和PDO，需要怎么去适配呢，又或者说，还有Oracle、非关系型数据库(Memcache、Redis)又怎么去适配呢。</p><h2 id="适配器模式的实现"><a href="#适配器模式的实现" class="headerlink" title="适配器模式的实现"></a>适配器模式的实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 数据库适配器</span><br><span class="line"> * Interface DatabaseAdapter</span><br><span class="line"> */</span><br><span class="line">interface DatabaseAdapter</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 连接数据库</span><br><span class="line">     * @param string $host</span><br><span class="line">     * @param int $port</span><br><span class="line">     * @param string $username</span><br><span class="line">     * @param string $password</span><br><span class="line">     * @param string $dbname</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function connect(string $host, int $port, string $username, string $password, string $dbname);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 执行sql</span><br><span class="line">     * @param string $sql</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function query(string $sql);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 关闭连接</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Class MySQLi</span><br><span class="line"> */</span><br><span class="line">class MySQLi implements DatabaseAdapter</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 连接数据库</span><br><span class="line">     * @param string $host</span><br><span class="line">     * @param int $port</span><br><span class="line">     * @param string $username</span><br><span class="line">     * @param string $password</span><br><span class="line">     * @param string $dbname</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function connect(string $host, int $port, string $username, string $password, string $dbname)</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement connect() method.</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 执行sql</span><br><span class="line">     * @param string $sql</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function query(string $sql)</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement query() method.</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 关闭连接</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function close()</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement close() method.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Class MySQL</span><br><span class="line"> */</span><br><span class="line">class MySQL implements DatabaseAdapter</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 连接数据库</span><br><span class="line">     * @param string $host</span><br><span class="line">     * @param int $port</span><br><span class="line">     * @param string $username</span><br><span class="line">     * @param string $password</span><br><span class="line">     * @param string $dbname</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function connect(string $host, int $port, string $username, string $password, string $dbname)</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement connect() method.</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 执行sql</span><br><span class="line">     * @param string $sql</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function query(string $sql)</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement query() method.</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 关闭连接</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function close()</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement close() method.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Class PDO</span><br><span class="line"> */</span><br><span class="line">class PDO implements DatabaseAdapter</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 连接数据库</span><br><span class="line">     * @param string $host</span><br><span class="line">     * @param int $port</span><br><span class="line">     * @param string $username</span><br><span class="line">     * @param string $password</span><br><span class="line">     * @param string $dbname</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function connect(string $host, int $port, string $username, string $password, string $dbname)</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement connect() method.</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 执行sql</span><br><span class="line">     * @param string $sql</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function query(string $sql)</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement query() method.</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 关闭连接</span><br><span class="line">     * @return mixed</span><br><span class="line">     */</span><br><span class="line">    public function close()</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement close() method.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/10/02/hello-world/"/>
      <url>/2023/10/02/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><p>This is my first blog post!</p><p><img src="/./images/cover-1.jpg" alt="img" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
